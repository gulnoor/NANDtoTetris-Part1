CHIP JUMP{
    IN j[3],EQ,LT,comp;
    OUT out;

    PARTS:
    Not(in=EQ, out=n_EQ);
    Not(in=LT, out=n_LT);
    And(a=n_EQ, b=n_LT, out=GT);
    Or(a=GT, b=EQ, out=GE);
    Or(a=LT, b=GT, out=NE);
    Or(a=LT, b=EQ, out=LE);

    And(a=j[2], b=GT, out=JGT);
    And(a=j[1], b=EQ, out=JEQ);
    And(a=j[1], b=j[2], out=t1);
    And(a=t1, b=GE, out=JGE);
    And(a=j[0], b=LT, out=JLT);
    And(a=j[0], b=j[2], out=t2);
    And(a=t2, b=NE, out=JNE);
    And(a=j[0], b=j[1], out=t3);
    And(a=t3, b=LE, out=JLE);
    And(a=t1,b=j[0,out=JMP])

    Or8Way(in[0]=false ,in[1]=JGT,in[2]=JEQ,IN[3]=JGE,in[4]=JLT,in[5]=JNE,in[6]=JLE,in[7]=JMP, out=yes);
    And(a=yes, b=comp, out=out);

}